Mississippi.java:
----------------
import java.util.*;
import java.io.File;
import java.io.FileNotFoundException; 
import java.util.ArrayList;
public class Mississippi
{
    public static void main(String[] args) throws FileNotFoundException
    {
        // set up a file object
        File data = new File("data.txt");
        
        // set up a scanner object to read from the file
        Scanner sc = new Scanner(data);
        
        // while there is data in the file, get the
        // next line and read it in as a string.
        // output the data
        while (sc.hasNextLine())
            {
                String input = sc.nextLine();
                char target = input.charAt(input.length()-1);
                target = Character.toUpperCase(target);
                input = input.substring(0,input.length()-2);
                ArrayList <Character> cList = uniqueLetters(input);
                System.out.println ("Unsorted" + cList);
                sSort(cList);
                System.out.println("Sorted" + cList);
                int pos = bSearch(cList, target);
                System.out.println("Target " + target + " at pos " + pos + "\n");
            }
   
        sc.close();
    }
    public static ArrayList <Character> uniqueLetters(String input) {
        input = input.replaceAll("\\s+", "");
        input = input.toUpperCase();
        ArrayList<Character> unique = new ArrayList<>();
        for (int i = 0; i < input.length(); i++) {
            char currentChar = input.charAt(i);
            if (!unique.contains(currentChar)) {
                unique.add(currentChar);
            }
        }
        return unique;
    }
    public static void sSort(ArrayList<Character> ArrayL) {
        for (int i = 0; i < ArrayL.size() - 1; i++) {
            int minIndex = i;
            for (int j = i + 1; j < ArrayL.size(); j++) {
                if (ArrayL.get(j) < ArrayL.get(minIndex)) {
                    minIndex = j;
                }
            }
            if (minIndex != i) {
                char temp = ArrayL.get(i);
                ArrayL.set(i, ArrayL.get(minIndex));
                ArrayL.set(minIndex, temp);
            }
        }
    }
    public static int bSearch(ArrayList<Character> ArrayL, int target) {
        int left = 0;
        int right = ArrayL.size() - 1;
        while (left <= right) {
            int mid = (left + right) / 2;
            if (ArrayL.get(mid) == target) {
                return mid;
            } else if (ArrayL.get(mid) < target) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
        return -1; 
    }
}

data.txt:
--------
Mississippi M
Baton Rouge e
Wilmington g
boCa RaTon Q
Staten Island S
Los Angeles A
Chicago B
Philadelphia L
Poughkeepsie E
San Antonio o
San Diego i
Oklahoma City t

